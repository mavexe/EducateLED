#include "main.h"
#include "i2c.h"
#include "gpio.h"

#define i2c_addr 8

void SystemClock_Config(void);

uint8_t rx_data;

void HAL_I2C_SlaveRxCpltCallback( 
+-)
{
	HAL_I2C_Slave_Receive_IT(&hi2c1, &rx_data, sizeof(rx_data));
	if(rx_data==1)HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	if(rx_data==2)HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);

}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
  unsigned error = HAL_I2C_GetError(hi2c);
  Error_Handler();
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
}


int main(void)
{

  HAL_Init();

  SystemClock_Config();

  MX_GPIO_Init();
  MX_I2C1_Init();

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);

  /*/проверка наличия slave-устройства
  int res = HAL_I2C_IsDeviceReady(&hi2c1, 8 << 1, 1, HAL_MAX_DELAY);
  if(res == HAL_OK)//если устройство ответило
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
  }*/


  //HAL_I2C_Slave_Receive_IT(&hi2c1, &data, 1);

 /* void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
  {
  	//if (HAL_I2C_Master_Receive_IT(&hi2c1, i2c_addr, &data, 1) == HAL_OK)
  	{
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
  	}
  }*/

  //HAL_I2C_EnableListen_IT(&hi2c1);


  HAL_I2C_Slave_Receive_IT(&hi2c1, &rx_data, sizeof(rx_data));

  while (1)
  {
	  //передача пакетов по i2c
	 /* uint8_t data=1;
	  HAL_I2C_Master_Transmit (&hi2c1, i2c_addr << 1, &data, 1, HAL_MAX_DELAY);
	  HAL_Delay(500);

	  data=2;
	  HAL_I2C_Master_Transmit (&hi2c1, i2c_addr << 1, &data, 1, HAL_MAX_DELAY);
	  HAL_Delay(500);*/


		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  	// Wait for 500 ms
	  	//HAL_Delay(500);
  }

}

/*
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
}

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
  {
  	//if (HAL_I2C_Master_Receive_IT(&hi2c1, i2c_addr, &data, 1) == HAL_OK)
  	{
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
  	}
  */

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}


void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
